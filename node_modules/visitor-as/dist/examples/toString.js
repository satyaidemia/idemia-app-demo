import { ASTTransformVisitor } from "../index.js";
import { SimpleParser } from "../simpleParser.js";
import { not, isStdlib, isMethodNamed, getName } from '../utils.js';
class ToStringCallTransform extends ASTTransformVisitor {
    currentClass;
    fields;
    visitFieldDeclaration(node) {
        const name = getName(node);
        let rhs = `this.${name}.toString()`;
        this.fields.push(`sb.push(\`${name}: \${${rhs}}\`)`);
        super.visitFieldDeclaration(node);
    }
    visitClassDeclaration(node) {
        if (!node.members || node.members.some(isMethodNamed("toString"))) {
            super.visitClassDeclaration(node);
            return;
        }
        this.currentClass = node;
        this.fields = [];
        this.visit(node.members); // will visit fields and methods
        const method = `
  toString(): string {
    const sb = new Array<string>();
    ${this.fields.join(";\n\t")};
    return \`${getName(node)}:\\n\\t\${sb.join("\\n\\t")}\`
  }
    `;
        let member = SimpleParser.parseClassMember(method, node);
        node.members.push(member);
        super.visitClassDeclaration(node);
    }
    afterParse(_) {
        let sources = _.sources.filter(not(isStdlib));
        this.visit(sources);
    }
}
export default ToStringCallTransform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9TdHJpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhhbXBsZXMvdG9TdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWxELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBdUIsYUFBYSxFQUFFLE9BQU8sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUl6RixNQUFNLHFCQUFzQixTQUFRLG1CQUFtQjtJQUNyRCxZQUFZLENBQW9CO0lBQ2hDLE1BQU0sQ0FBWTtJQUVsQixxQkFBcUIsQ0FBQyxJQUFzQjtRQUMxQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxHQUFHLEdBQUcsUUFBUSxJQUFJLGFBQWEsQ0FBQztRQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBR0QscUJBQXFCLENBQUMsSUFBc0I7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7WUFDakUsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZ0NBQWdDO1FBQzFELE1BQU0sTUFBTSxHQUFHOzs7TUFHYixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7ZUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQzs7S0FFdkIsQ0FBQTtRQUNELElBQUksTUFBTSxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUIsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBUztRQUNsQixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RCLENBQUM7Q0FFRjtBQUdELGVBQWUscUJBQXFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBU1RUcmFuc2Zvcm1WaXNpdG9yIH0gZnJvbSBcIi4uL2luZGV4LmpzXCI7XHJcbmltcG9ydCB7IFBhcnNlciwgQ2xhc3NEZWNsYXJhdGlvbiwgRmllbGREZWNsYXJhdGlvbiB9IGZyb20gXCJhc3NlbWJseXNjcmlwdC9kaXN0L2Fzc2VtYmx5c2NyaXB0LmpzXCI7XHJcbmltcG9ydCB7IFNpbXBsZVBhcnNlciB9IGZyb20gXCIuLi9zaW1wbGVQYXJzZXIuanNcIjtcclxuaW1wb3J0IHsgbm90LCBpc1N0ZGxpYiwgY2xhc3NOYW1lLCB0b1N0cmluZywgaXNNZXRob2ROYW1lZCwgZ2V0TmFtZSB9IGZyb20gJy4uL3V0aWxzLmpzJztcclxuXHJcblxyXG5cclxuY2xhc3MgVG9TdHJpbmdDYWxsVHJhbnNmb3JtIGV4dGVuZHMgQVNUVHJhbnNmb3JtVmlzaXRvciB7XHJcbiAgY3VycmVudENsYXNzPzogQ2xhc3NEZWNsYXJhdGlvbjtcclxuICBmaWVsZHMhOiBzdHJpbmdbXTtcclxuXHJcbiAgdmlzaXRGaWVsZERlY2xhcmF0aW9uKG5vZGU6IEZpZWxkRGVjbGFyYXRpb24pOiB2b2lkIHtcclxuICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKG5vZGUpO1xyXG4gICAgbGV0IHJocyA9IGB0aGlzLiR7bmFtZX0udG9TdHJpbmcoKWA7XHJcbiAgICB0aGlzLmZpZWxkcy5wdXNoKGBzYi5wdXNoKFxcYCR7bmFtZX06IFxcJHske3Joc319XFxgKWApO1xyXG4gICAgc3VwZXIudmlzaXRGaWVsZERlY2xhcmF0aW9uKG5vZGUpO1xyXG4gIH1cclxuXHJcblxyXG4gIHZpc2l0Q2xhc3NEZWNsYXJhdGlvbihub2RlOiBDbGFzc0RlY2xhcmF0aW9uKTogdm9pZCB7XHJcbiAgICBpZiAoIW5vZGUubWVtYmVycyB8fCBub2RlLm1lbWJlcnMuc29tZShpc01ldGhvZE5hbWVkKFwidG9TdHJpbmdcIikpKSB7XHJcbiAgICAgIHN1cGVyLnZpc2l0Q2xhc3NEZWNsYXJhdGlvbihub2RlKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aGlzLmN1cnJlbnRDbGFzcyA9IG5vZGU7XHJcbiAgICB0aGlzLmZpZWxkcyA9IFtdO1xyXG4gICAgdGhpcy52aXNpdChub2RlLm1lbWJlcnMpOyAvLyB3aWxsIHZpc2l0IGZpZWxkcyBhbmQgbWV0aG9kc1xyXG4gICAgY29uc3QgbWV0aG9kID0gYFxyXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBzYiA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XHJcbiAgICAke3RoaXMuZmllbGRzLmpvaW4oXCI7XFxuXFx0XCIpfTtcclxuICAgIHJldHVybiBcXGAke2dldE5hbWUobm9kZSl9OlxcXFxuXFxcXHRcXCR7c2Iuam9pbihcIlxcXFxuXFxcXHRcIil9XFxgXHJcbiAgfVxyXG4gICAgYFxyXG4gICAgbGV0IG1lbWJlciA9IFNpbXBsZVBhcnNlci5wYXJzZUNsYXNzTWVtYmVyKG1ldGhvZCwgbm9kZSk7XHJcbiAgICBub2RlLm1lbWJlcnMucHVzaChtZW1iZXIpO1xyXG4gICAgc3VwZXIudmlzaXRDbGFzc0RlY2xhcmF0aW9uKG5vZGUpO1xyXG4gIH1cclxuXHJcbiAgYWZ0ZXJQYXJzZShfOiBQYXJzZXIpOiB2b2lkIHtcclxuICAgIGxldCBzb3VyY2VzID0gXy5zb3VyY2VzLmZpbHRlcihub3QoaXNTdGRsaWIpKTtcclxuICAgIHRoaXMudmlzaXQoc291cmNlcyk7XHJcbiAgfVxyXG4gIFxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9TdHJpbmdDYWxsVHJhbnNmb3JtO1xyXG4iXX0=