import { Transform } from "assemblyscript/dist/transform.js";
import { getDecorator, hasDecorator, isLibrary, isUserEntry } from "../utils.js";
function getName(element) {
    let decorator = getDecorator(element.declaration, "exportAs");
    if (decorator.args == null) {
        throw Error("exportAs expects a string argument but got null.");
    }
    if (decorator.args.length != 1) {
        throw Error(`exportAs expects 1 argument but got ${decorator.args.length}`);
    }
    if (!decorator.args[0].isLiteralKind(2 /* LiteralKind.String */)) {
        throw Error("exportAs expects a string argument");
    }
    return decorator.args[0].value;
}
class Transformer extends Transform {
    afterInitialize(program) {
        let files = Array.from(program.filesByName.values()).filter((file) => isUserEntry(file.source) && !isLibrary(file.source));
        for (let file of files) {
            for (let _export of file.exports?.values() || []) {
                if (_export != null && hasDecorator(_export, "exportAs")) {
                    let newName = getName(_export);
                    file.exports?.delete(_export.name);
                    file.exports?.set(newName, _export);
                }
            }
        }
    }
}
export default Transformer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0QXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhhbXBsZXMvZXhwb3J0QXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFakYsU0FBUyxPQUFPLENBQUMsT0FBd0I7SUFDdkMsSUFBSSxTQUFTLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDOUQsSUFBSSxTQUFTLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtRQUMxQixNQUFNLEtBQUssQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0tBQ2pFO0lBQ0QsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDOUIsTUFBTSxLQUFLLENBQUMsdUNBQXVDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUM3RTtJQUNELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsNEJBQW9CLEVBQUU7UUFDeEQsTUFBTSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztLQUNuRDtJQUNELE9BQWlDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFFLENBQUMsS0FBSyxDQUFDO0FBQzVELENBQUM7QUFFRCxNQUFNLFdBQVksU0FBUSxTQUFTO0lBQ2pDLGVBQWUsQ0FBQyxPQUFnQjtRQUM5QixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQ3pELENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDOUQsQ0FBQztRQUNGLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3RCLEtBQUssSUFBSSxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ2hELElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxFQUFFO29CQUN4RCxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQy9CLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDbkMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUNyQzthQUNGO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxlQUFlLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgTGl0ZXJhbEtpbmQsXHJcbiAgU3RyaW5nTGl0ZXJhbEV4cHJlc3Npb24sXHJcbiAgUHJvZ3JhbSxcclxuICBEZWNsYXJlZEVsZW1lbnQsXHJcbn0gZnJvbSBcImFzc2VtYmx5c2NyaXB0L2Rpc3QvYXNzZW1ibHlzY3JpcHQuanNcIjtcclxuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSBcImFzc2VtYmx5c2NyaXB0L2Rpc3QvdHJhbnNmb3JtLmpzXCI7XHJcbmltcG9ydCB7IGdldERlY29yYXRvciwgaGFzRGVjb3JhdG9yLCBpc0xpYnJhcnksIGlzVXNlckVudHJ5IH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XHJcblxyXG5mdW5jdGlvbiBnZXROYW1lKGVsZW1lbnQ6IERlY2xhcmVkRWxlbWVudCk6IHN0cmluZyB7XHJcbiAgbGV0IGRlY29yYXRvciA9IGdldERlY29yYXRvcihlbGVtZW50LmRlY2xhcmF0aW9uLCBcImV4cG9ydEFzXCIpO1xyXG4gIGlmIChkZWNvcmF0b3IuYXJncyA9PSBudWxsKSB7XHJcbiAgICB0aHJvdyBFcnJvcihcImV4cG9ydEFzIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQgYnV0IGdvdCBudWxsLlwiKTtcclxuICB9XHJcbiAgaWYgKGRlY29yYXRvci5hcmdzLmxlbmd0aCAhPSAxKSB7XHJcbiAgICB0aHJvdyBFcnJvcihgZXhwb3J0QXMgZXhwZWN0cyAxIGFyZ3VtZW50IGJ1dCBnb3QgJHtkZWNvcmF0b3IuYXJncy5sZW5ndGh9YCk7XHJcbiAgfVxyXG4gIGlmICghZGVjb3JhdG9yLmFyZ3NbMF0uaXNMaXRlcmFsS2luZChMaXRlcmFsS2luZC5TdHJpbmcpKSB7XHJcbiAgICB0aHJvdyBFcnJvcihcImV4cG9ydEFzIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnRcIik7XHJcbiAgfVxyXG4gIHJldHVybiAoPFN0cmluZ0xpdGVyYWxFeHByZXNzaW9uPmRlY29yYXRvci5hcmdzWzBdKS52YWx1ZTtcclxufVxyXG5cclxuY2xhc3MgVHJhbnNmb3JtZXIgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xyXG4gIGFmdGVySW5pdGlhbGl6ZShwcm9ncmFtOiBQcm9ncmFtKTogdm9pZCB7XHJcbiAgICBsZXQgZmlsZXMgPSBBcnJheS5mcm9tKHByb2dyYW0uZmlsZXNCeU5hbWUudmFsdWVzKCkpLmZpbHRlcihcclxuICAgICAgKGZpbGUpID0+IGlzVXNlckVudHJ5KGZpbGUuc291cmNlKSAmJiAhaXNMaWJyYXJ5KGZpbGUuc291cmNlKVxyXG4gICAgKTtcclxuICAgIGZvciAobGV0IGZpbGUgb2YgZmlsZXMpIHtcclxuICAgICAgZm9yIChsZXQgX2V4cG9ydCBvZiBmaWxlLmV4cG9ydHM/LnZhbHVlcygpIHx8IFtdKSB7XHJcbiAgICAgICAgaWYgKF9leHBvcnQgIT0gbnVsbCAmJiBoYXNEZWNvcmF0b3IoX2V4cG9ydCwgXCJleHBvcnRBc1wiKSkge1xyXG4gICAgICAgICAgbGV0IG5ld05hbWUgPSBnZXROYW1lKF9leHBvcnQpO1xyXG4gICAgICAgICAgZmlsZS5leHBvcnRzPy5kZWxldGUoX2V4cG9ydC5uYW1lKTtcclxuICAgICAgICAgIGZpbGUuZXhwb3J0cz8uc2V0KG5ld05hbWUsIF9leHBvcnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVHJhbnNmb3JtZXI7XHJcbiJdfQ==