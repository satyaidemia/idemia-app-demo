import { Parser, Tokenizer, Source, } from "assemblyscript/dist/assemblyscript.js";
export class SimpleParser {
    static get parser() {
        return new Parser();
    }
    static getTokenizer(s, file = "index.ts") {
        return new Tokenizer(new Source(0 /* SourceKind.User */, file, s));
    }
    static parseExpression(s) {
        const res = this.parser.parseExpression(this.getTokenizer(s));
        if (res == null) {
            throw new Error("Failed to parse the expression: '" + s + "'");
        }
        return res;
    }
    static parseStatement(s, topLevel = false) {
        const res = this.parser.parseStatement(this.getTokenizer(s), topLevel);
        if (res == null) {
            throw new Error("Failed to parse the statement: '" + s + "'");
        }
        return res;
    }
    static parseTopLevelStatement(s, namespace) {
        const res = this.parser.parseTopLevelStatement(this.getTokenizer(s), namespace);
        if (res == null) {
            throw new Error("Failed to parse the top level statement: '" + s + "'");
        }
        return res;
    }
    static parseClassMember(s, _class) {
        let res = this.parser.parseClassMember(this.getTokenizer(s, _class.range.source.normalizedPath), _class);
        if (res == null) {
            throw new Error("Failed to parse the class member: '" + s + "'");
        }
        return res;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlUGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NpbXBsZVBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEdBT1AsTUFBTSx1Q0FBdUMsQ0FBQztBQUUvQyxNQUFNLE9BQU8sWUFBWTtJQUNmLE1BQU0sS0FBSyxNQUFNO1FBQ3ZCLE9BQU8sSUFBSSxNQUFNLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFTLEVBQUUsT0FBZSxVQUFVO1FBQzlELE9BQU8sSUFBSSxTQUFTLENBQUMsSUFBSSxNQUFNLDBCQUFrQixJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFTO1FBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUNoRTtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBUyxFQUFFLFFBQVEsR0FBRyxLQUFLO1FBQy9DLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdkUsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDL0Q7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxNQUFNLENBQUMsc0JBQXNCLENBQzNCLENBQVMsRUFDVCxTQUF1QztRQUV2QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEYsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDekU7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBUyxFQUFFLE1BQXdCO1FBQ3pELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUN4RCxNQUFNLENBQ1AsQ0FBQztRQUNGLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQ2xFO1FBQ0QsT0FBNkIsR0FBRyxDQUFDO0lBQ25DLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgUGFyc2VyLFxyXG4gIFRva2VuaXplcixcclxuICBTb3VyY2UsXHJcbiAgU291cmNlS2luZCxcclxuICBFeHByZXNzaW9uLFxyXG4gIFN0YXRlbWVudCxcclxuICBOYW1lc3BhY2VEZWNsYXJhdGlvbixcclxuICBDbGFzc0RlY2xhcmF0aW9uLFxyXG4gIERlY2xhcmF0aW9uU3RhdGVtZW50LFxyXG59IGZyb20gXCJhc3NlbWJseXNjcmlwdC9kaXN0L2Fzc2VtYmx5c2NyaXB0LmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2ltcGxlUGFyc2VyIHtcclxuICBwcml2YXRlIHN0YXRpYyBnZXQgcGFyc2VyKCk6IFBhcnNlciB7XHJcbiAgICByZXR1cm4gbmV3IFBhcnNlcigpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0VG9rZW5pemVyKHM6IHN0cmluZywgZmlsZTogc3RyaW5nID0gXCJpbmRleC50c1wiKTogVG9rZW5pemVyIHtcclxuICAgIHJldHVybiBuZXcgVG9rZW5pemVyKG5ldyBTb3VyY2UoU291cmNlS2luZC5Vc2VyLCBmaWxlLCBzKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcGFyc2VFeHByZXNzaW9uKHM6IHN0cmluZyk6IEV4cHJlc3Npb24ge1xyXG4gICAgY29uc3QgcmVzID0gdGhpcy5wYXJzZXIucGFyc2VFeHByZXNzaW9uKHRoaXMuZ2V0VG9rZW5pemVyKHMpKTtcclxuICAgIGlmIChyZXMgPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgdGhlIGV4cHJlc3Npb246ICdcIiArIHMgKyBcIidcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHBhcnNlU3RhdGVtZW50KHM6IHN0cmluZywgdG9wTGV2ZWwgPSBmYWxzZSk6IFN0YXRlbWVudCB7XHJcbiAgICBjb25zdCByZXMgPSB0aGlzLnBhcnNlci5wYXJzZVN0YXRlbWVudCh0aGlzLmdldFRva2VuaXplcihzKSwgdG9wTGV2ZWwpO1xyXG4gICAgaWYgKHJlcyA9PSBudWxsKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSB0aGUgc3RhdGVtZW50OiAnXCIgKyBzICsgXCInXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwYXJzZVRvcExldmVsU3RhdGVtZW50KFxyXG4gICAgczogc3RyaW5nLFxyXG4gICAgbmFtZXNwYWNlPzogTmFtZXNwYWNlRGVjbGFyYXRpb24gfCBudWxsXHJcbiAgKTogU3RhdGVtZW50IHtcclxuICAgIGNvbnN0IHJlcyA9IHRoaXMucGFyc2VyLnBhcnNlVG9wTGV2ZWxTdGF0ZW1lbnQodGhpcy5nZXRUb2tlbml6ZXIocyksIG5hbWVzcGFjZSk7XHJcbiAgICBpZiAocmVzID09IG51bGwpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIHRoZSB0b3AgbGV2ZWwgc3RhdGVtZW50OiAnXCIgKyBzICsgXCInXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwYXJzZUNsYXNzTWVtYmVyKHM6IHN0cmluZywgX2NsYXNzOiBDbGFzc0RlY2xhcmF0aW9uKTogRGVjbGFyYXRpb25TdGF0ZW1lbnQge1xyXG4gICAgbGV0IHJlcyA9IHRoaXMucGFyc2VyLnBhcnNlQ2xhc3NNZW1iZXIoXHJcbiAgICAgIHRoaXMuZ2V0VG9rZW5pemVyKHMsIF9jbGFzcy5yYW5nZS5zb3VyY2Uubm9ybWFsaXplZFBhdGgpLFxyXG4gICAgICBfY2xhc3NcclxuICAgICk7XHJcbiAgICBpZiAocmVzID09IG51bGwpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIHRoZSBjbGFzcyBtZW1iZXI6ICdcIiArIHMgKyBcIidcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gPERlY2xhcmF0aW9uU3RhdGVtZW50PnJlcztcclxuICB9XHJcbn1cclxuIl19