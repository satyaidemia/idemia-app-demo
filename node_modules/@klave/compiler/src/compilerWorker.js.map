{"version":3,"sources":["../../../../libs/compiler/src/compilerWorker.ts"],"sourcesContent":["import { TransferListItem, Worker } from 'node:worker_threads';\r\nimport ts from 'typescript';\r\nimport { v4 as uuid } from 'uuid';\r\nimport type { Stats } from 'assemblyscript/dist/asc';\r\nimport { formatter } from './languageService';\r\nimport { compilerModuleFunction } from './compilerModule';\r\nimport localPackageJson from '../package.json';\r\n\r\nconst deferredMarker = '__klave_deferred__';\r\n\r\ntype ParentMessage = {\r\n    type: 'read';\r\n    id: number;\r\n    filename?: string;\r\n    contents: string | null;\r\n} | {\r\n    type: 'write';\r\n    id: number;\r\n    filename: string;\r\n    contents: string | null;\r\n} | {\r\n    type: 'compile';\r\n}\r\n\r\ntype CompilerMessage = {\r\n    type: 'read';\r\n    id: number;\r\n    filename: string;\r\n} | {\r\n    type: 'write';\r\n    filename: string;\r\n    contents: string | Uint8Array | null;\r\n} | {\r\n    type: 'diagnostic';\r\n    diagnostics: string;\r\n} | {\r\n    type: 'errored';\r\n    error: Error;\r\n    stdout?: string;\r\n    stderr?: string;\r\n} | {\r\n    type: 'done';\r\n    stats: Stats;\r\n    stdout?: string;\r\n    stderr?: string;\r\n} | {\r\n    type: 'start';\r\n    version: string;\r\n} | {\r\n    type: 'compile';\r\n}\r\n\r\nexport class CompilerHost {\r\n\r\n    id = uuid();\r\n    version = localPackageJson.version;\r\n    ascVersion = 'unknown';\r\n    entryFile = -1;\r\n\r\n    constructor(private worker: Worker) { }\r\n\r\n    on(event: 'message', listener: (value: CompilerMessage) => void): this {\r\n        if (event === 'message') {\r\n            this.worker.on('message', (message: CompilerMessage) => {\r\n                if (message.type === 'start') {\r\n                    this.ascVersion = message.version;\r\n                }\r\n                if (message.type === 'write') {\r\n                    if (message.filename === 'out.d.ts' && message.contents) {\r\n                        let filteredDTS = '';\r\n                        // parse the d.ts file\r\n                        const sourceFile = ts.createSourceFile(\r\n                            `${this.id}.d.ts`,\r\n                            message.contents.toLocaleString(),\r\n                            ts.ScriptTarget.Latest,\r\n                            true\r\n                        );\r\n                        const seenFunctions: string[] = [];\r\n                        ts.forEachChild(sourceFile, node => {\r\n                            if (ts.isFunctionDeclaration(node)) {\r\n                                if (node.name && ![\r\n                                    'register_routes',\r\n                                    '__new',\r\n                                    '__pin',\r\n                                    '__unpin',\r\n                                    '__collect'\r\n                                ].includes(node.name.text) && !seenFunctions.includes(node.name.text)) {\r\n                                    if (node.name.text.startsWith(deferredMarker))\r\n                                        seenFunctions.push(node.name.text.replace(deferredMarker, ''));\r\n                                    filteredDTS += `${node.getFullText().replaceAll(deferredMarker, '').trim()}\\n`;\r\n                                }\r\n                            }\r\n                        });\r\n                        message.contents = filteredDTS;\r\n                    }\r\n                    return listener(message);\r\n                }\r\n                if (message.type === 'read') {\r\n                    if (message.filename === '..ts' ||\r\n                        message.filename === 'index.ts' ||\r\n                        message.filename === './index.ts' ||\r\n                        message.filename === '.\\\\index.ts')\r\n                        this.entryFile = message.id;\r\n                }\r\n                listener(message);\r\n            });\r\n        } else\r\n            this.worker.on(event, listener);\r\n        return this;\r\n    }\r\n\r\n    postMessage(value: ParentMessage, transferList?: ReadonlyArray<TransferListItem>): void {\r\n        if (value.type === 'read')\r\n            if (value.id === this.entryFile && value.contents) {\r\n\r\n                let normalizedEntryFile = `\r\n                import { JSON as ${deferredMarker}JSON, Utils as ${deferredMarker}Utils } from '@klave/sdk';\r\n                `;\r\n                const sourceFile = ts.createSourceFile(\r\n                    `${this.id}.d.ts`,\r\n                    value.contents,\r\n                    ts.ScriptTarget.Latest,\r\n                    true\r\n                );\r\n                let shouldAddRouting = true;\r\n                const exportedFunctions: Record<'transactions' | 'queries', string[]> = {\r\n                    transactions: [],\r\n                    queries: []\r\n                };\r\n                ts.forEachChild(sourceFile, node => {\r\n                    if (ts.isFunctionDeclaration(node)) {\r\n                        if (node.name?.text === 'register_routes') {\r\n                            shouldAddRouting = false;\r\n                            normalizedEntryFile += `${node.getFullText().trim()}\\n`;\r\n                        } else if (node.flags && node.modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword)) {\r\n                            if (node.name?.text) {\r\n                                const tags = ts.getAllJSDocTagsOfKind(node, ts.SyntaxKind.JSDocTag);\r\n                                const tagNames = new Set(tags.map(tag => tag.tagName.text));\r\n                                if (tagNames.has('transaction'))\r\n                                    exportedFunctions.transactions.push(node.name.text);\r\n                                else if (tagNames.has('query'))\r\n                                    exportedFunctions.queries.push(node.name.text);\r\n                                const inputParam = node.parameters[0];\r\n                                if (inputParam) {\r\n                                    const inputParamName = inputParam.name.getText();\r\n                                    const inputParamType = inputParam.type?.getText();\r\n                                    if (inputParamType && inputParamType !== 'i32') {\r\n                                        const mangledName = `${deferredMarker}${node.name.text}`;\r\n                                        normalizedEntryFile += `${node.getFullText()\r\n                                            // TODO - Understand if we should keep the export keyword\r\n                                            // .replace('export function', 'function')\r\n                                            .replace(node.name.text, mangledName)\r\n                                            .trim()}\\n`;\r\n                                        normalizedEntryFile += `\r\n                                        export function ${node.name.text}(${inputParamName}: i32): void {\r\n                                            const ${inputParamName}String = ${deferredMarker}Utils.pointerToString(${inputParamName});\r\n                                            const ${inputParamName}Object = ${deferredMarker}JSON.parse<${inputParamType}>(${inputParamName}String);\r\n                                            return ${mangledName}(${inputParamName}Object);\r\n                                        }`;\r\n                                    } else {\r\n                                        normalizedEntryFile += `${node.getFullText().trim()}\\n`;\r\n                                    }\r\n                                } else {\r\n                                    const mangledName = `${deferredMarker}${node.name.text}`;\r\n                                    normalizedEntryFile += `${node.getFullText()\r\n                                        // TODO - Understand if we should keep the export keyword\r\n                                        // .replace('export function', 'function')\r\n                                        .replace(node.name.text, mangledName)\r\n                                        .trim()}\\n`;\r\n                                    normalizedEntryFile += `\r\n                                        export function ${node.name.text}(_no_args_: i32): void {\r\n                                            return ${mangledName}();\r\n                                        }`;\r\n                                }\r\n                            } else {\r\n                                normalizedEntryFile += `${node.getFullText().trim()}\\n`;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        normalizedEntryFile += `${node.getFullText().trim()}\\n`;\r\n                    }\r\n                });\r\n\r\n                if (shouldAddRouting)\r\n                    normalizedEntryFile += `\r\n                    // @ts-ignore: decorator\r\n                    @external(\"env\", \"add_user_query\")\r\n                    declare function runtime_add_user_query(s: ArrayBuffer): void;\r\n                    // @ts-ignore: decorator\r\n                    @external(\"env\", \"add_user_transaction\")\r\n                    declare function runtime_add_user_transaction(s: ArrayBuffer): void;\r\n                    export function register_routes(): void {\r\n                        ${exportedFunctions.queries.map(name => `runtime_add_user_query(String.UTF8.encode(\"${name}\", true));`).join('\\n')}\r\n                        ${exportedFunctions.transactions.map(name => `runtime_add_user_transaction(String.UTF8.encode(\"${name}\", true));`).join('\\n')}\r\n                    }\r\n                `;\r\n\r\n                normalizedEntryFile = formatter(normalizedEntryFile);\r\n                value.contents = normalizedEntryFile;\r\n            }\r\n        this.worker.postMessage(value, transferList);\r\n    }\r\n\r\n    async terminate(): Promise<number> {\r\n        return this.worker.terminate();\r\n    }\r\n}\r\n\r\nexport const createCompiler = async () => {\r\n\r\n    const workerCodeBase = compilerModuleFunction.toString();\r\n    const workerCode = workerCodeBase.substring(workerCodeBase.indexOf('=>') + 2).replaceAll('_interop_require_wildcard(require', '(import');\r\n    const worker = new Worker(workerCode, {\r\n        eval: true,\r\n        name: 'Klave WASM Compiler',\r\n        env: {},\r\n        argv: []\r\n    });\r\n\r\n    const compiler = new CompilerHost(worker);\r\n    compiler.postMessage({ type: 'compile' });\r\n\r\n    return compiler;\r\n};\r\n"],"names":["CompilerHost","createCompiler","deferredMarker","constructor","worker","id","uuid","version","localPackageJson","ascVersion","entryFile","on","event","listener","message","type","filename","contents","filteredDTS","sourceFile","ts","createSourceFile","toLocaleString","ScriptTarget","Latest","seenFunctions","forEachChild","node","isFunctionDeclaration","name","includes","text","startsWith","push","replace","getFullText","replaceAll","trim","postMessage","value","transferList","normalizedEntryFile","shouldAddRouting","exportedFunctions","transactions","queries","flags","modifiers","some","m","kind","SyntaxKind","ExportKeyword","tags","getAllJSDocTagsOfKind","JSDocTag","tagNames","Set","map","tag","tagName","has","inputParam","parameters","inputParamName","getText","inputParamType","mangledName","join","formatter","terminate","workerCodeBase","compilerModuleFunction","toString","workerCode","substring","indexOf","Worker","eval","env","argv","compiler"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}