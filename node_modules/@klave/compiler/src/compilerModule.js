"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "compilerModuleFunction", {
    enumerable: true,
    get: function() {
        return compilerModuleFunction;
    }
});
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const compilerModuleFunction = ()=>{
    const load = async ()=>{
        'use strict';
        const { parentPort } = await Promise.resolve().then(()=>_interop_require_wildcard(require("node:worker_threads")));
        try {
            const { PassThrough } = await Promise.resolve().then(()=>_interop_require_wildcard(require("node:stream")));
            const { serializeError } = await Promise.resolve().then(()=>_interop_require_wildcard(require("serialize-error")));
            const assemblyscript = await Promise.resolve().then(()=>_interop_require_wildcard(require("assemblyscript/dist/asc.js")));
            const { default: JSONTranform } = await Promise.resolve().then(()=>_interop_require_wildcard(require("@klave/as-json/transform/lib/index.js")));
            const asc = assemblyscript;
            const pendingResolves = {};
            let pendingReadIdentifier = 0;
            const compileStdOut = new PassThrough();
            const compileStdErr = new PassThrough();
            parentPort?.on('message', (message)=>{
                if (message.type === 'compile') {
                    parentPort.postMessage({
                        type: 'start',
                        version: asc.version
                    });
                    asc.main([
                        '.',
                        '--exportRuntime',
                        '-O',
                        '--noAssert',
                        '--optimizeLevel',
                        '3',
                        '--shrinkLevel',
                        '2',
                        '--converge',
                        '--bindings',
                        'esm',
                        '--outFile',
                        'out.wasm',
                        '--textFile',
                        'out.wat'
                    ], {
                        stdout: compileStdOut,
                        stderr: compileStdErr,
                        reportDiagnostic: (diagnostics)=>{
                            parentPort.postMessage({
                                type: 'diagnostic',
                                diagnostics
                            });
                        },
                        transforms: [
                            new JSONTranform()
                        ],
                        readFile: async (filename)=>{
                            const currentReadIdentifier = pendingReadIdentifier++;
                            return new Promise((resolve)=>{
                                setTimeout(()=>{
                                    if (process.env['DEBUG'] === 'true') console.debug('faile_read_bail:' + filename);
                                    resolve(null);
                                }, 5000);
                                pendingResolves[currentReadIdentifier] = resolve;
                                parentPort.postMessage({
                                    type: 'read',
                                    filename,
                                    id: currentReadIdentifier
                                });
                            }).catch(async ()=>{
                                const resolve = pendingResolves[currentReadIdentifier];
                                delete pendingResolves[currentReadIdentifier];
                                return resolve?.(null) ?? Promise.resolve(null);
                            });
                        },
                        writeFile: async (filename, contents)=>{
                            parentPort.postMessage({
                                type: 'write',
                                filename,
                                contents
                            });
                        }
                    }).then((result)=>{
                        let chunk;
                        let actualStdOut = '';
                        while(null !== (chunk = compileStdOut.read()))actualStdOut += String(chunk);
                        let actualStdErr = '';
                        while(null !== (chunk = compileStdErr.read()))actualStdErr += String(chunk);
                        if (result.error) {
                            parentPort.postMessage({
                                type: 'errored',
                                error: serializeError(result.error),
                                stdout: actualStdOut,
                                stderr: actualStdErr
                            });
                        } else parentPort.postMessage({
                            type: 'done',
                            stats: result.stats.toString(),
                            stdout: actualStdOut,
                            stderr: actualStdErr
                        });
                    }).catch((error)=>{
                        parentPort.postMessage({
                            type: 'errored',
                            error: serializeError(error)
                        });
                    });
                } else if (message.type === 'read') {
                    if (pendingResolves[message.id]) {
                        pendingResolves[message.id]?.(message.contents);
                        delete pendingResolves[message.id];
                    }
                }
            });
        } catch (error) {
            console.error(error);
            const result = new Error('Compiler service failure');
            parentPort?.postMessage({
                type: 'errored',
                error: result,
                stderr: result.toString()
            });
        }
    };
    load().catch((error)=>{
        console.error(error);
        process.exit(1);
    });
};

//# sourceMappingURL=compilerModule.js.map