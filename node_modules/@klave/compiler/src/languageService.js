"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LanguageServiceHost: function() {
        return LanguageServiceHost;
    },
    formatter: function() {
        return formatter;
    }
});
const _typescript = _interop_require_default(require("typescript"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let LanguageServiceHost = class LanguageServiceHost {
    addFile(fileName, text) {
        this.files[fileName] = _typescript.default.ScriptSnapshot.fromString(text);
    }
    readFile(fileName) {
        const snapshot = this.files[fileName];
        return snapshot ? snapshot.getText(0, snapshot.getLength()) : undefined;
    }
    fileExists(fileName) {
        return fileName in this.files;
    }
    constructor(){
        this.files = {};
        this.getCompilationSettings = ()=>_typescript.default.getDefaultCompilerOptions();
        this.getScriptFileNames = ()=>Object.keys(this.files);
        this.getScriptVersion = ()=>'0';
        this.getScriptSnapshot = (fileName)=>this.files[fileName];
        this.getCurrentDirectory = ()=>process.cwd();
        this.getDefaultLibFileName = (options)=>_typescript.default.getDefaultLibFilePath(options);
    }
};
function createDefaultFormatCodeSettings() {
    return {
        baseIndentSize: 0,
        indentSize: 4,
        tabSize: 4,
        indentStyle: _typescript.default.IndentStyle.Smart,
        newLineCharacter: '\n',
        convertTabsToSpaces: true,
        trimTrailingWhitespace: true,
        insertSpaceAfterCommaDelimiter: true,
        insertSpaceAfterSemicolonInForStatements: true,
        insertSpaceBeforeAndAfterBinaryOperators: true,
        insertSpaceAfterConstructor: false,
        insertSpaceAfterKeywordsInControlFlowStatements: true,
        insertSpaceAfterFunctionKeywordForAnonymousFunctions: false,
        insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,
        insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,
        insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: true,
        insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,
        insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: false,
        insertSpaceAfterTypeAssertion: false,
        insertSpaceBeforeFunctionParenthesis: false,
        placeOpenBraceOnNewLineForFunctions: false,
        placeOpenBraceOnNewLineForControlBlocks: false,
        insertSpaceBeforeTypeAnnotation: false
    };
}
function formatter(text, options = createDefaultFormatCodeSettings()) {
    const host = new LanguageServiceHost();
    host.addFile('entry.ts', text);
    const languageService = _typescript.default.createLanguageService(host);
    const edits = languageService.getFormattingEditsForDocument('entry.ts', options);
    edits.sort((a, b)=>a.span.start - b.span.start).reverse().forEach((edit)=>{
        const head = text.slice(0, edit.span.start);
        const tail = text.slice(edit.span.start + edit.span.length);
        text = `${head}${edit.newText}${tail}`;
    });
    return text;
}

//# sourceMappingURL=languageService.js.map