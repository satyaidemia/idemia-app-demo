{"version":3,"sources":["../../../../libs/compiler/src/compilerModule.ts"],"sourcesContent":["export const compilerModuleFunction = () => {\r\n    const load = async () => {\r\n        'use strict';\r\n\r\n        const { parentPort } = await import('node:worker_threads');\r\n\r\n        try {\r\n\r\n            const { PassThrough } = await import('node:stream');\r\n            const { serializeError } = await import('serialize-error');\r\n            const assemblyscript = await import('assemblyscript/dist/asc.js');\r\n\r\n            /** @type {import('@klave/as-json/transform/src/index')} */\r\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n            // @ts-ignore\r\n            const { default: JSONTranform } = await import('@klave/as-json/transform/lib/index.js');\r\n\r\n            /** @type {import('assemblyscript/dist/asc.d.ts')} */\r\n            const asc = assemblyscript;\r\n            const pendingResolves: Record<number, (value: string | PromiseLike<string | null> | null) => void> = {};\r\n            let pendingReadIdentifier = 0;\r\n\r\n            const compileStdOut = new PassThrough();\r\n            const compileStdErr = new PassThrough();\r\n\r\n            parentPort?.on('message', (message) => {\r\n                if (message.type === 'compile') {\r\n                    parentPort.postMessage({\r\n                        type: 'start',\r\n                        version: asc.version\r\n                    });\r\n                    asc.main([\r\n                        '.',\r\n                        '--exportRuntime',\r\n                        '-O', '--noAssert',\r\n                        '--optimizeLevel', '3',\r\n                        '--shrinkLevel', '2',\r\n                        '--converge',\r\n                        // '--transform', '@klave/as-json/transform',\r\n                        '--bindings', 'esm',\r\n                        '--outFile', 'out.wasm',\r\n                        '--textFile', 'out.wat'\r\n                    ], {\r\n                        stdout: compileStdOut,\r\n                        stderr: compileStdErr,\r\n                        reportDiagnostic: (diagnostics) => {\r\n                            parentPort.postMessage({\r\n                                type: 'diagnostic',\r\n                                diagnostics\r\n                            });\r\n                        },\r\n                        transforms: [\r\n                            new JSONTranform()\r\n                        ],\r\n                        readFile: async (filename) => {\r\n                            const currentReadIdentifier = pendingReadIdentifier++;\r\n                            return new Promise<string | null>((resolve) => {\r\n                                setTimeout(() => {\r\n                                    if (process.env['DEBUG'] === 'true')\r\n                                        console.debug('faile_read_bail:' + filename);\r\n                                    resolve(null);\r\n                                }, 5000);\r\n                                pendingResolves[currentReadIdentifier] = resolve;\r\n                                parentPort.postMessage({\r\n                                    type: 'read',\r\n                                    filename,\r\n                                    id: currentReadIdentifier\r\n                                });\r\n                            }).catch(async () => {\r\n                                const resolve = pendingResolves[currentReadIdentifier];\r\n                                delete pendingResolves[currentReadIdentifier];\r\n                                return resolve?.(null) ?? Promise.resolve(null);\r\n                            });\r\n                        },\r\n                        writeFile: async (filename, contents) => {\r\n                            parentPort.postMessage({\r\n                                type: 'write',\r\n                                filename,\r\n                                contents\r\n                            });\r\n                        }\r\n                    }).then((result) => {\r\n\r\n                        let chunk;\r\n                        let actualStdOut = '';\r\n                        while (null !== (chunk = compileStdOut.read()))\r\n                            actualStdOut += String(chunk);\r\n                        let actualStdErr = '';\r\n                        while (null !== (chunk = compileStdErr.read()))\r\n                            actualStdErr += String(chunk);\r\n\r\n                        if (result.error) {\r\n                            parentPort.postMessage({\r\n                                type: 'errored',\r\n                                error: serializeError(result.error),\r\n                                stdout: actualStdOut,\r\n                                stderr: actualStdErr\r\n                            });\r\n                        } else\r\n                            parentPort.postMessage({\r\n                                type: 'done',\r\n                                stats: result.stats.toString(),\r\n                                stdout: actualStdOut,\r\n                                stderr: actualStdErr\r\n                            });\r\n                    }).catch((error) => {\r\n                        parentPort.postMessage({\r\n                            type: 'errored',\r\n                            error: serializeError(error)\r\n                        });\r\n                    });\r\n                } else if (message.type === 'read') {\r\n                    if (pendingResolves[message.id]) {\r\n                        pendingResolves[message.id]?.(message.contents);\r\n                        delete pendingResolves[message.id];\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            const result = new Error('Compiler service failure');\r\n            parentPort?.postMessage({\r\n                type: 'errored',\r\n                error: result,\r\n                stderr: result.toString()\r\n            });\r\n        }\r\n    };\r\n    load()\r\n        .catch((error) => {\r\n            console.error(error);\r\n            process.exit(1);\r\n        });\r\n};"],"names":["compilerModuleFunction","load","parentPort","PassThrough","serializeError","assemblyscript","default","JSONTranform","asc","pendingResolves","pendingReadIdentifier","compileStdOut","compileStdErr","on","message","type","postMessage","version","main","stdout","stderr","reportDiagnostic","diagnostics","transforms","readFile","filename","currentReadIdentifier","Promise","resolve","setTimeout","process","env","console","debug","id","catch","writeFile","contents","then","result","chunk","actualStdOut","read","String","actualStdErr","error","stats","toString","Error","exit"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}