/// <reference types="node" />
import { TransferListItem, Worker } from 'node:worker_threads';
import type { Stats } from 'assemblyscript/dist/asc';
type ParentMessage = {
    type: 'read';
    id: number;
    filename?: string;
    contents: string | null;
} | {
    type: 'write';
    id: number;
    filename: string;
    contents: string | null;
} | {
    type: 'compile';
};
type CompilerMessage = {
    type: 'read';
    id: number;
    filename: string;
} | {
    type: 'write';
    filename: string;
    contents: string | Uint8Array | null;
} | {
    type: 'diagnostic';
    diagnostics: string;
} | {
    type: 'errored';
    error: Error;
    stdout?: string;
    stderr?: string;
} | {
    type: 'done';
    stats: Stats;
    stdout?: string;
    stderr?: string;
} | {
    type: 'start';
    version: string;
} | {
    type: 'compile';
};
export declare class CompilerHost {
    private worker;
    id: string;
    version: string;
    ascVersion: string;
    entryFile: number;
    constructor(worker: Worker);
    on(event: 'message', listener: (value: CompilerMessage) => void): this;
    postMessage(value: ParentMessage, transferList?: ReadonlyArray<TransferListItem>): void;
    terminate(): Promise<number>;
}
export declare const createCompiler: () => Promise<CompilerHost>;
export {};
