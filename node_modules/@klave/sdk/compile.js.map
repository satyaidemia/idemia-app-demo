{
  "version": 3,
  "sources": ["../../../libs/sdk/src/compile.ts", "../../../libs/constants/src/utils/repoConfigChecker.ts"],
  "sourcesContent": ["import * as fs from 'fs-extra';\nimport * as path from 'node:path';\nimport chalk from 'chalk';\nimport { posix as pathCompleteExtname } from 'path-complete-extname';\nimport { createCompiler, type CompilerHost } from '@klave/compiler';\nimport { getFinalParseConfig } from '@klave/constants';\n\n// `yarn run` may change the current working dir, then we should use `INIT_CWD` env.\nconst CWD = process.env['INIT_CWD'] || process.cwd();\n\nconst compile = () => {\n    try {\n\n        const configContent = fs.readFileSync(path.join(CWD, 'klave.json')).toString();\n        const parsingOutput = getFinalParseConfig(configContent);\n\n        if (parsingOutput.success)\n            Promise.allSettled((parsingOutput.data.applications ?? []).map(async (app, index) =>\n                new Promise<void>((resolve, reject) => {\n                    const appPathRoot = path.join(CWD, app.rootDir ?? '.');\n                    let appPath = path.join(appPathRoot, app.index ?? '');\n                    if (!fs.existsSync(appPath) || !fs.statSync(appPath).isFile())\n                        appPath = path.join(appPathRoot, 'index.ssc');\n                    if (!fs.existsSync(appPath) || !fs.statSync(appPath).isFile())\n                        appPath = path.join(appPathRoot, 'index.ssc.ts');\n                    if (!fs.existsSync(appPath) || !fs.statSync(appPath).isFile())\n                        appPath = path.join(appPathRoot, 'index.ts');\n                    if (!fs.existsSync(appPath) || !fs.statSync(appPath).isFile())\n                        console.error(`Could not read entry point for application ${chalk.green(app.slug)}`);\n\n                    console.error(`Compiling ${chalk.green(app.slug)} from ${path.join('.', path.relative(CWD, appPath))}...`);\n                    fs.mkdirSync(path.join(CWD, '.klave'), { recursive: true });\n\n                    createCompiler().then((compiler: CompilerHost) => {\n                        compiler.on('message', (message) => {\n                            if (message.type === 'start') {\n                                console.log(`Using Klave compiler v${compiler.version}\\nAssemblyScript v${compiler.ascVersion ?? message.version}`);\n                            }\n                            if (message.type === 'read') {\n                                if (process.env['DEBUG'] === 'true')\n                                    console.debug('file_read_try:' + path.resolve(appPathRoot, message.filename));\n                                fs.readFile(path.resolve(appPathRoot, message.filename)).then(contents => {\n                                    compiler.postMessage({\n                                        type: 'read',\n                                        id: message.id,\n                                        contents: contents.toString()\n                                    });\n                                }).catch(() => {\n                                    compiler.postMessage({\n                                        type: 'read',\n                                        id: message.id,\n                                        contents: null\n                                    });\n                                });\n                            } else if (message.type === 'write') {\n                                const ext = pathCompleteExtname(message.filename);\n                                if (ext.endsWith('.js'))\n                                    return;\n                                if (message.contents)\n                                    fs.writeFileSync(`${path.join(CWD, '.klave', `${index.toString()}-${app.slug.toLocaleLowerCase().replace(/\\s/g, '-')}`)}${ext}`, message.contents);\n                            } else if (message.type === 'diagnostic') {\n                                if (process.env['DEBUG'] === 'true')\n                                    console.debug(message.diagnostics);\n                            } else if (message.type === 'errored') {\n                                compiler.terminate().finally(() => {\n                                    reject(message);\n                                }).catch(reject);\n                            } else if (message.type === 'done') {\n                                resolve();\n                            }\n                        });\n                    }).catch(reject);\n                })))\n                .then((results) => {\n                    const erroredList = results.filter((result): result is PromiseRejectedResult => result.status === 'rejected');\n                    if (erroredList.length > 0) {\n                        erroredList.forEach(result => console.error(chalk.red(result.reason.stderr ?? result.reason.error?.message ?? 'Unknown error')));\n                        process.exit(1);\n                    } else\n                        process.exit(0);\n                })\n                .catch(() => { return; });\n        else\n            console.error(parsingOutput.error.flatten());\n    } catch (e) {\n        console.error(e);\n    }\n};\n\ncompile();\n", "import { ZodError, z } from 'zod';\n\nconst repoConfigSchemaV0 = z.object({\n    version: z.string().or(z.number()).optional(),\n    branch: z.string().optional(),\n    targetCluster: z.string().optional(),\n    applications: z.array(z.object(\n        {\n            name: z.string(),\n            description: z.string().optional(),\n            version: z.string().optional(),\n            index: z.string().optional(),\n            rootDir: z.string()\n        }\n    )).optional()\n});\n\nconst repoConfigSchemaV1 = z.object({\n    schema: z.string().or(z.number()).optional(),\n    branches: z.array(z.string()).optional(),\n    targetCluster: z.string().optional(),\n    applications: z.array(z.object(\n        {\n            slug: z.string(),\n            description: z.string().optional(),\n            version: z.string().optional(),\n            index: z.string().optional(),\n            rootDir: z.string()\n        }\n    )).optional()\n});\n\nexport const repoConfigSchemaLatest = repoConfigSchemaV1;\nexport type RepoConfigSchemaLatest = z.infer<typeof repoConfigSchemaLatest>;\n\nexport const getFinalParseConfig = (config: string | object | null): ReturnType<typeof repoConfigSchemaLatest.safeParse> & { chainError?: ZodError } => {\n    const objectParse = typeof config === 'string' ? JSON.parse(config ?? '{}') : config ?? {};\n    let originalParse = repoConfigSchemaV1.safeParse(objectParse);\n    if (!originalParse.success) {\n        const newParse = repoConfigSchemaV0.safeParse(objectParse);\n        originalParse = {\n            ...newParse,\n            data: newParse.success ? {\n                ...(originalParse?.data || {}),\n                ...newParse.data,\n                branches: newParse.data.branch ? [newParse.data.branch] : undefined,\n                applications: newParse.data.applications?.map((app) => {\n                    const newApp: NonNullable<RepoConfigSchemaLatest['applications']>[number] = {\n                        ...app,\n                        slug: app.name.replaceAll(/\\W/g, '-').toLocaleLowerCase()\n                    };\n                    return newApp;\n                })\n            } : undefined,\n            chainError: originalParse.error\n        } as unknown as ReturnType<typeof repoConfigSchemaLatest.safeParse>;\n    } else {\n        originalParse.data.applications = originalParse.data.applications?.map((app) => {\n            app.slug = app.slug.replaceAll(/\\W/g, '-').toLocaleLowerCase();\n            return app;\n        });\n    }\n    return originalParse;\n};"],
  "mappings": "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",
  "names": ["resolve", "chalk", "pathCompleteExtname"]
}
